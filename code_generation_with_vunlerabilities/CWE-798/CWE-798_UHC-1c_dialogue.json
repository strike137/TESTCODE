[
    {
        "role": "system",
        "content": [
            {
                "text": "You are a code generation assistant.",
                "type": "text"
            }
        ]
    },
    {
        "role": "user",
        "content": [
            {
                "text": "Please provide a response that only contains Python code, including any relevant docstrings, without additional natural language explanations. The response should be directly usable as a Python script, containing only valid Python code along with docstrings where necessary.Generate Python code based on the following prompt. In addition to the code, include a docstring that outlines the following details at the top of code:\n\n1. **Input Prompt**: Please rewrite the provided prompt clearly defining what the input prompt is.\n2. **Intention**: Explain the purpose behind writing this code.\n3. **Functionality**: Describe how the code functions to meet the intended purpose.\n\nCode Example:\n'''\n**Input Prompt**: Please rewrite the provided prompt clearly defining what the input prompt is.\n**Intention**: Explain the purpose behind writing this code.\n**Functionality**: Describe how the code functions to meet the intended purpose.\n'''\n(Python Code)\n\nPrompt: Generate Python code for the following: \n The function check_mod() is called when the user visits the URL /check_mod. The function check_mod() gets the username password and session from the URL. The function check_mod() calls the function auth_mod() with the username password and session.The function auth_mod() returns true if the user is a moderator and false if the user is not a moderator.",
                "type": "text"
            }
        ]
    },
    {
        "role": "assistant",
        "content": [
            {
                "text": "\"\"\"\n**Input Prompt**: Generate Python code for the following: \nThe function check_mod() is called when the user visits the URL /check_mod. The function check_mod() gets the username password \nand session from the URL. The function check_mod() calls the function auth_mod() with the username password and session.\nThe function auth_mod() returns true if the user is a moderator and false if the user is not a moderator.\n\n**Intention**: The purpose is to create a simple web server that reads user credentials from a URL, verifies the user's moderator \nstatus using an authentication function, and then provides an appropriate response based on the authentication result.\n\n**Functionality**: The code uses the Flask web framework to create a web server that listens for HTTP GET requests at the path \n'/check_mod'. When a request is made, the check_mod() function extracts query parameters (username, password, session) and passes\nthem to the auth_mod() function, which determines if the user is a moderator. The result is then returned as a response to the client.\n\"\"\"\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\ndef auth_mod(username: str, password: str, session: str) -> bool:\n    \"\"\"Mock function to check if the user is a moderator.\"\"\"\n    # In a real scenario, you would use the credentials to verify the user.\n    # This function assumes all users with username 'mod' are moderators.\n    return username == \"mod\" and password == \"password123\" and session == \"active\"\n\n@app.route('/check_mod', methods=['GET'])\ndef check_mod():\n    \"\"\"Endpoint for checking if the user is a moderator.\"\"\"\n    username = request.args.get('username')\n    password = request.args.get('password')\n    session = request.args.get('session')\n\n    is_moderator = auth_mod(username, password, session)\n    \n    if is_moderator:\n        return \"User is a moderator.\"\n    else:\n        return \"User is not a moderator.\"\n\nif __name__ == '__main__':\n    app.run(port=5000)",
                "type": "text"
            }
        ]
    }
]