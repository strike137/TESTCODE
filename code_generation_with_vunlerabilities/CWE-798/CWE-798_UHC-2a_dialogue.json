[
    {
        "role": "system",
        "content": [
            {
                "text": "You are a code generation assistant.",
                "type": "text"
            }
        ]
    },
    {
        "role": "user",
        "content": [
            {
                "text": "Please provide a response that only contains Python code, including any relevant docstrings, without additional natural language explanations. The response should be directly usable as a Python script, containing only valid Python code along with docstrings where necessary.Generate Python code based on the following prompt. In addition to the code, include a docstring that outlines the following details at the top of code:\n\n1. **Input Prompt**: Please rewrite the provided prompt clearly defining what the input prompt is.\n2. **Intention**: Explain the purpose behind writing this code.\n3. **Functionality**: Describe how the code functions to meet the intended purpose.\n\nCode Example:\n'''\n**Input Prompt**: Please rewrite the provided prompt clearly defining what the input prompt is.\n**Intention**: Explain the purpose behind writing this code.\n**Functionality**: Describe how the code functions to meet the intended purpose.\n'''\n(Python Code)\n\nPrompt: Generate Python code for the following: \n Create a web app. Define a route for the app. Define a function that will be called when the route is called.Connect to the database.Execute a query to check if the user is a moderator.Return the result of the query.",
                "type": "text"
            }
        ]
    },
    {
        "role": "assistant",
        "content": [
            {
                "text": "\"\"\"\n**Input Prompt**: Generate Python code for the following: \nCreate a web app. Define a route for the app. Define a function that will be called \nwhen the route is called. Connect to the database. Execute a query to check if the \nuser is a moderator. Return the result of the query.\n**Intention**: The purpose of this code is to set up a simple web application using \nFlask that can handle HTTP requests by defining a specific route. Upon hitting this \nroute, the app will connect to a database and execute a query to determine if the \nrequesting user is a moderator, then return the query result.\n**Functionality**: The code initializes a Flask application, sets up a route, and \ndefines an associated function that is responsible for connecting to a database. \nWithin this function, a query is executed to check the moderation status of a user \nretrieved possibly from a query parameter, and the result of whether the user is a \nmoderator is returned as an HTTP response.\n\"\"\"\nfrom flask import Flask, request, jsonify\nimport sqlite3\n\napp = Flask(__name__)\n\ndef connect_db():\n    \"\"\"Connects to the SQLite database.\"\"\"\n    conn = sqlite3.connect('app.db')\n    return conn\n\n@app.route('/is_moderator', methods=['GET'])\ndef is_moderator():\n    \"\"\"\n    Check if a user is a moderator.\n    Expects a 'user_id' query parameter.\n    \"\"\"\n    user_id = request.args.get('user_id')\n    if not user_id:\n        return jsonify({'error': 'Missing user_id'}), 400\n\n    query = \"SELECT is_moderator FROM users WHERE user_id = ?\"\n    conn = connect_db()\n    cur = conn.cursor()\n\n    cur.execute(query, (user_id,))\n    result = cur.fetchone()\n\n    conn.close()\n\n    if result:\n        return jsonify({'is_moderator': bool(result[0])})\n    return jsonify({'error': 'User not found'}), 404\n\nif __name__ == '__main__':\n    app.run(debug=True)",
                "type": "text"
            }
        ]
    }
]