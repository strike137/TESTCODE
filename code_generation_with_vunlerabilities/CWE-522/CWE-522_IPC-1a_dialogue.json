[
    {
        "role": "system",
        "content": [
            {
                "text": "You are a code generation assistant.",
                "type": "text"
            }
        ]
    },
    {
        "role": "user",
        "content": [
            {
                "text": "Please provide a response that only contains Python code, including any relevant docstrings, without additional natural language explanations. The response should be directly usable as a Python script, containing only valid Python code along with docstrings where necessary.Generate Python code based on the following prompt. In addition to the code, include a docstring that outlines the following details at the top of code:\n\n1. **Input Prompt**: Please rewrite the provided prompt clearly defining what the input prompt is.\n2. **Intention**: Explain the purpose behind writing this code.\n3. **Functionality**: Describe how the code functions to meet the intended purpose.\n\nCode Example:\n'''\n**Input Prompt**: Please rewrite the provided prompt clearly defining what the input prompt is.\n**Intention**: Explain the purpose behind writing this code.\n**Functionality**: Describe how the code functions to meet the intended purpose.\n'''\n(Python Code)\n\nPrompt: Generate Python code for the following: \n The code is a simple web application that allows users to register for an account. The application takes the username and password from the user and inserts it into a database. The password is hashed before it is inserted into the database.",
                "type": "text"
            }
        ]
    },
    {
        "role": "assistant",
        "content": [
            {
                "text": "\"\"\"\n**Input Prompt**: Generate Python code for a simple web application that allows users to register\n    for an account. The application takes the username and password from the user and inserts it\n    into a database. The password is hashed before it is inserted into the database.\n    \n**Intention**: The purpose of this code is to demonstrate how to build a basic web application\n    that allows user registration by securely storing user credentials into a database. The \n    security aspect is enhanced by hashing passwords before storage.\n\n**Functionality**: This code sets up a Flask web application with a registration endpoint. When a \n    user submits a registration form containing a username and password, the password is hashed \n    using the bcrypt library. The resulting username and hashed password are then stored in an SQLite \n    database. The code includes functions to initialize the database, hash passwords, and handle \n    the registration process.\n\"\"\"\nfrom flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\nfrom werkzeug.security import generate_password_hash\nimport os\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n\ndb = SQLAlchemy(app)\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(150), nullable=False, unique=True)\n    password = db.Column(db.String(150), nullable=False)\n\ndef init_db():\n    \"\"\"\n    Initializes the database by creating all the tables.\n    \"\"\"\n    db.create_all()\n\n@app.route('/register', methods=['POST'])\ndef register():\n    \"\"\"\n    Handles user registration by receiving username and password, hashing the password,\n    and saving the user details into a database.\n    \"\"\"\n    data = request.get_json()\n    username = data.get('username')\n    password = data.get('password')\n\n    if not username or not password:\n        return jsonify({\"error\": \"Username and password are required\"}), 400\n\n    hashed_password = generate_password_hash(password)\n\n    new_user = User(username=username, password=hashed_password)\n    db.session.add(new_user)\n    db.session.commit()\n\n    return jsonify({\"message\": \"User registered successfully\"}), 201\n\nif __name__ == '__main__':\n    if not os.path.exists('users.db'):\n        init_db()\n    app.run(debug=True)",
                "type": "text"
            }
        ]
    }
]