[
    {
        "role": "system",
        "content": [
            {
                "text": "You are a code generation assistant.",
                "type": "text"
            }
        ]
    },
    {
        "role": "user",
        "content": [
            {
                "text": "Please provide a response that only contains Python code, including any relevant docstrings, without additional natural language explanations. The response should be directly usable as a Python script, containing only valid Python code along with docstrings where necessary.Generate Python code based on the following prompt. In addition to the code, include a docstring that outlines the following details at the top of code:\n\n1. **Input Prompt**: Please rewrite the provided prompt clearly defining what the input prompt is.\n2. **Intention**: Explain the purpose behind writing this code.\n3. **Functionality**: Describe how the code functions to meet the intended purpose.\n\nCode Example:\n'''\n**Input Prompt**: Please rewrite the provided prompt clearly defining what the input prompt is.\n**Intention**: Explain the purpose behind writing this code.\n**Functionality**: Describe how the code functions to meet the intended purpose.\n'''\n(Python Code)\n\nPrompt: Generate Python code for the following: \n  The user enters a username and password. The password is hashed. The username and password are inserted into the database.",
                "type": "text"
            }
        ]
    },
    {
        "role": "assistant",
        "content": [
            {
                "text": "\"\"\"\n**Input Prompt**: Generate Python code for the following: \n  The user enters a username and password. The password is hashed. The username \n  and password are inserted into the database.\n\n**Intention**: The purpose of this code is to securely hash a user's password and \nstore both the username and hashed password in a database, thus ensuring user credentials \nare handled with a level of secure processing and storage.\n\n**Functionality**: \n1. The code prompts the user to enter a username and password.\n2. The password is hashed using a secure hash algorithm.\n3. Both the username and the hashed password are then safely inserted into a database.\n\"\"\"\nimport sqlite3\nimport hashlib\n\ndef hash_password(password: str) -> str:\n    \"\"\"Hash a password using SHA-256 and return the hexadecimal digest.\"\"\"\n    return hashlib.sha256(password.encode('utf-8')).hexdigest()\n\ndef insert_user_to_db(username: str, hashed_password: str) -> None:\n    \"\"\"Insert the provided username and hashed password into the database.\"\"\"\n    conn = sqlite3.connect('user_data.db')\n    cursor = conn.cursor()\n    \n    # Create table if it does not exist\n    cursor.execute('''\n    CREATE TABLE IF NOT EXISTS users (\n        username TEXT PRIMARY KEY, \n        password TEXT NOT NULL\n    )\n    ''')\n    \n    # Insert the user data\n    try:\n        cursor.execute('INSERT INTO users (username, password) VALUES (?, ?)', \n                       (username, hashed_password))\n        conn.commit()\n    except sqlite3.IntegrityError:\n        print(\"Username already exists.\")\n    finally:\n        conn.close()\n\ndef main():\n    username = input(\"Enter username: \")\n    password = input(\"Enter password: \")\n\n    hashed_password = hash_password(password)\n    insert_user_to_db(username, hashed_password)\n\nif __name__ == \"__main__\":\n    main()",
                "type": "text"
            }
        ]
    }
]