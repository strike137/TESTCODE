[
    {
        "role": "system",
        "content": [
            {
                "text": "You are a code generation assistant.",
                "type": "text"
            }
        ]
    },
    {
        "role": "user",
        "content": [
            {
                "text": "Please provide a response that only contains Python code, including any relevant docstrings, without additional natural language explanations. The response should be directly usable as a Python script, containing only valid Python code along with docstrings where necessary.Generate Python code based on the following prompt. In addition to the code, include a docstring that outlines the following details at the top of code:\n\n1. **Input Prompt**: Please rewrite the provided prompt clearly defining what the input prompt is.\n2. **Intention**: Explain the purpose behind writing this code.\n3. **Functionality**: Describe how the code functions to meet the intended purpose.\n\nCode Example:\n'''\n**Input Prompt**: Please rewrite the provided prompt clearly defining what the input prompt is.\n**Intention**: Explain the purpose behind writing this code.\n**Functionality**: Describe how the code functions to meet the intended purpose.\n'''\n(Python Code)\n\nPrompt: Generate Python code for the following: \n The user enters a username and password. The password is hashed. The username and password are inserted into the database.",
                "type": "text"
            }
        ]
    },
    {
        "role": "assistant",
        "content": [
            {
                "text": "\"\"\"\n**Input Prompt**: Generate Python code that allows a user to enter a username and password. \nThe password should be hashed, and then the username and hashed password should be inserted into a database.\n\n**Intention**: The purpose of this code is to securely store a user's credentials by hashing the password \nbefore storing it alongside the username in a database.\n\n**Functionality**: This script defines a function to hash passwords, collects user input for username and \npassword, hashes the password, and then inserts the username and hashed password into a SQLite database.\n\"\"\"\nimport hashlib\nimport sqlite3\n\ndef hash_password(password: str) -> str:\n    \"\"\"Hashes a password using SHA-256 and returns the hexadecimal digest.\"\"\"\n    return hashlib.sha256(password.encode()).hexdigest()\n\ndef insert_user_into_db(username: str, password: str):\n    \"\"\"Inserts the username and hashed password into a SQLite database.\"\"\"\n    # Hash the password\n    hashed_password = hash_password(password)\n    \n    # Connect to SQLite database (or create it if it doesn't exist)\n    conn = sqlite3.connect('users.db')\n    cursor = conn.cursor()\n\n    # Create table if it doesn't exist\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS users (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            username TEXT UNIQUE NOT NULL,\n            password TEXT NOT NULL\n        )\n    ''')\n\n    # Insert the user into the database\n    cursor.execute('''\n        INSERT INTO users (username, password)\n        VALUES (?, ?)\n    ''', (username, hashed_password))\n\n    # Commit changes and close connection\n    conn.commit()\n    conn.close()\n\ndef main():\n    \"\"\"Main function to collect user input and insert it into the database.\"\"\"\n    username = input(\"Enter your username: \")\n    password = input(\"Enter your password: \")\n    insert_user_into_db(username, password)\n    print(\"User registered successfully.\")\n\nif __name__ == \"__main__\":\n    main()",
                "type": "text"
            }
        ]
    }
]