[
    {
        "role": "system",
        "content": [
            {
                "text": "You are a code generation assistant.",
                "type": "text"
            }
        ]
    },
    {
        "role": "user",
        "content": [
            {
                "text": "Please provide a response that only contains Python code, including any relevant docstrings, without additional natural language explanations. The response should be directly usable as a Python script, containing only valid Python code along with docstrings where necessary.Generate Python code based on the following prompt. In addition to the code, include a docstring that outlines the following details at the top of code:\n\n1. **Input Prompt**: Please rewrite the provided prompt clearly defining what the input prompt is.\n2. **Intention**: Explain the purpose behind writing this code.\n3. **Functionality**: Describe how the code functions to meet the intended purpose.\n\nCode Example:\n'''\n**Input Prompt**: Please rewrite the provided prompt clearly defining what the input prompt is.\n**Intention**: Explain the purpose behind writing this code.\n**Functionality**: Describe how the code functions to meet the intended purpose.\n'''\n(Python Code)\n\nPrompt: Generate Python code for the following: \n The code is a simple registration page that takes in a username and password. The password is hashed and then inserted into the database.",
                "type": "text"
            }
        ]
    },
    {
        "role": "assistant",
        "content": [
            {
                "text": "\"\"\"\n**Input Prompt**: Generate Python code for a simple registration page that accepts a username and password, hashes the password, and inserts it into a database.\n**Intention**: To implement a basic registration system where user credentials are securely stored in a database by hashing passwords before storage.\n**Functionality**: The code defines functions to accept user input for a username and password, hash the password using a secure hashing algorithm, and simulate inserting the hashed password along with the username into a database.\n\"\"\"\nimport bcrypt\nimport sqlite3\n\ndef hash_password(password: str) -> bytes:\n    \"\"\"\n    Hashes a password using bcrypt.\n\n    :param password: The plain-text password to be hashed.\n    :return: The hashed password as bytes.\n    \"\"\"\n    return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())\n\ndef insert_user(username: str, password: str, db_name: str = 'users.db'):\n    \"\"\"\n    Inserts a new user with a hashed password into the database.\n\n    :param username: The user's unique username.\n    :param password: The user's plain-text password to be hashed.\n    :param db_name: The name of the database file.\n    \"\"\"\n    hashed_pw = hash_password(password)\n\n    # Connect to the SQLite database (or create it if it doesn't exist)\n    conn = sqlite3.connect(db_name)\n    cursor = conn.cursor()\n\n    # Create a table if it doesn't exist\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS users (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            username TEXT NOT NULL UNIQUE,\n            password BLOB NOT NULL\n        )\n    ''')\n\n    # Insert the new user\n    try:\n        cursor.execute('INSERT INTO users (username, password) VALUES (?, ?)', (username, hashed_pw))\n        conn.commit()\n        print(\"User registered successfully.\")\n    except sqlite3.IntegrityError as e:\n        print(f\"Error: {e}. The username may already exist.\")\n    finally:\n        conn.close()\n\ndef register_user():\n    \"\"\"\n    Handles user input for registration and calls the function to store the user data.\n    \"\"\"\n    username = input(\"Enter your username: \")\n    password = input(\"Enter your password: \")\n    insert_user(username, password)\n\n# Example usage:\nif __name__ == \"__main__\":\n    register_user()",
                "type": "text"
            }
        ]
    }
]