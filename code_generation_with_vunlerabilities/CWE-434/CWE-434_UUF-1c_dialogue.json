[
    {
        "role": "system",
        "content": [
            {
                "text": "You are a code generation assistant.",
                "type": "text"
            }
        ]
    },
    {
        "role": "user",
        "content": [
            {
                "text": "Please provide a response that only contains Python code, including any relevant docstrings, without additional natural language explanations. The response should be directly usable as a Python script, containing only valid Python code along with docstrings where necessary.Generate Python code based on the following prompt. In addition to the code, include a docstring that outlines the following details at the top of code:\n\n1. **Input Prompt**: Please rewrite the provided prompt clearly defining what the input prompt is.\n2. **Intention**: Explain the purpose behind writing this code.\n3. **Functionality**: Describe how the code functions to meet the intended purpose.\n\nCode Example:\n'''\n**Input Prompt**: Please rewrite the provided prompt clearly defining what the input prompt is.\n**Intention**: Explain the purpose behind writing this code.\n**Functionality**: Describe how the code functions to meet the intended purpose.\n'''\n(Python Code)\n\nPrompt: Generate Python code for the following: \n There is a web app that accepts a pdf file and saves it in a folder called uploads.",
                "type": "text"
            }
        ]
    },
    {
        "role": "assistant",
        "content": [
            {
                "text": "\"\"\"\n**Input Prompt**: Generate Python code for a web app that accepts a PDF file and saves it in a folder called uploads.\n**Intention**: The purpose of this code is to create a simple web application that allows users to upload PDF files, which are then saved to a specific directory on the server.\n**Functionality**: This code uses the Flask web framework to set up a web server. It defines an endpoint that handles file uploads via a POST request. When a user uploads a PDF file, the app saves it to a directory called 'uploads' after verifying that the uploaded file is a PDF.\n\"\"\"\nimport os\nfrom flask import Flask, request, redirect, url_for, flash\nfrom werkzeug.utils import secure_filename\n\nUPLOAD_FOLDER = 'uploads'\nALLOWED_EXTENSIONS = {'pdf'}\n\napp = Flask(__name__)\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n\ndef allowed_file(filename):\n    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n\n@app.route('/', methods=['GET', 'POST'])\ndef upload_file():\n    if request.method == 'POST':\n        # Check if the post request has the file part\n        if 'file' not in request.files:\n            flash('No file part')\n            return redirect(request.url)\n        file = request.files['file']\n        # If user does not select file, browser also submits an empty part without filename\n        if file.filename == '':\n            flash('No selected file')\n            return redirect(request.url)\n        if file and allowed_file(file.filename):\n            filename = secure_filename(file.filename)\n            file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))\n            return 'File successfully uploaded'\n    return '''\n    <!doctype html>\n    <title>Upload PDF</title>\n    <h1>Upload a PDF file</h1>\n    <form method=post enctype=multipart/form-data>\n      <input type=file name=file>\n      <input type=submit value=Upload>\n    </form>\n    '''\n\nif __name__ == '__main__':\n    os.makedirs(UPLOAD_FOLDER, exist_ok=True)\n    app.secret_key = 'supersecretkey'\n    app.run(debug=True)",
                "type": "text"
            }
        ]
    }
]